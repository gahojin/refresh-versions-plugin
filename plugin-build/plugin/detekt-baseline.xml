<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:CodeParser.kt$CodeParser$fun parse(code: CharSequence)</ID>
    <ID>CyclomaticComplexMethod:Version.kt$Item.ListItem$override fun compareTo(other: Item?): Int</ID>
    <ID>CyclomaticComplexMethod:Version.kt$Version.Companion$private fun parseVersion(version: String): ListItem</ID>
    <ID>LongMethod:CodeParser.kt$CodeParser$fun parse(code: CharSequence)</ID>
    <ID>LongMethod:Version.kt$Version.Companion$private fun parseVersion(version: String): ListItem</ID>
    <ID>LoopWithTooManyJumpStatements:CodeParser.kt$CodeParser$while</ID>
    <ID>NestedBlockDepth:MavenMetadataParser.kt$MavenMetadataParser$@JvmStatic fun parse(xml: String): List&lt;Version></ID>
    <ID>NestedBlockDepth:Version.kt$Item.ListItem$fun normalize()</ID>
    <ID>NestedBlockDepth:Version.kt$Item.ListItem$override fun compareTo(other: Item?): Int</ID>
    <ID>NestedBlockDepth:Version.kt$Version.Companion$private fun parseVersion(version: String): ListItem</ID>
    <ID>ReturnCount:CodeParser.kt$CodeParser.State.Code$override suspend fun nextState(code: CharSequence, index: Int, block: suspend (State, Int, Boolean) -> Unit) : Int</ID>
    <ID>ReturnCount:CodeParser.kt$CodeParser.State.InComment$override suspend fun nextState(code: CharSequence, index: Int, block: suspend (State, Int, Boolean) -> Unit): Int</ID>
  </CurrentIssues>
</SmellBaseline>
